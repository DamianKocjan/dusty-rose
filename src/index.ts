import { app, BrowserWindow, ipcMain, Menu } from 'electron';
import { Settings } from './settings';
import { DSMenu } from './ds/Menu';
import fs, { PathLike } from 'fs';

declare global {
  interface Window {
    ds: {
      platform(): string;
      write(path: PathLike, data: string): void;
      read(path: PathLike): string;
      delete(path: PathLike): void;
      mkdir(path: PathLike): void;
      rename(path: PathLike, newName: string): void;
    };
  }
}

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

ipcMain.on('read', (event, path: string) => {
  event.returnValue = fs.existsSync(path) ? fs.readFileSync(path, 'utf8') : '';
});

ipcMain.on('platform', (event) => {
  event.returnValue = process.platform;
});

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  const settings = new Settings({
    configName: 'settings',
    defaults: {
      windowBounds: { width: 800, height: 600 },
      fullscreen: false,
    },
  });

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    // ...settings.get('windowBounds'),
    // minHeight: 600,
    // minWidth: 800,
    // fullscreen: settings.get('fullscreen'),

    height: 1080,
    width: 1920,

    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  // set the menu to desktop app
  const menu_design = Menu.buildFromTemplate(new DSMenu().initMenu());
  Menu.setApplicationMenu(menu_design);

  mainWindow.on('resize', () => {
    const { width, height } = mainWindow.getBounds();

    settings.set('windowBounds', { width, height });
  });

  mainWindow.on('enter-full-screen', () => {
    settings.set('fullscreen', mainWindow.isFullScreen());
  });

  mainWindow.on('leave-full-screen', () => {
    settings.set('fullscreen', mainWindow.isFullScreen());
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
