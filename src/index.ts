import { app, BrowserWindow, dialog, ipcMain, Menu } from 'electron';
import { Settings } from './settings';
import { DSMenu } from './ds/Menu';
import fs, { PathLike } from 'fs';
import path from 'path';

declare global {
  interface ExplolerItem {
    name: string;
    isDirectory: boolean;
    isFile: boolean;
  }

  interface Window {
    ds: {
      platform: string;
      write(path: PathLike, data: string): { status: string; path: string };
      read(path: PathLike): string;
      delete(path: PathLike, isFile: boolean): void;
      mkdir(path: PathLike): void;
      rename(path: PathLike, newName: string): void;
      explore(path: PathLike): ExplolerItem[];
    };
  }
}

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let mainWindow: BrowserWindow = null;

ipcMain.on('ds:read', (event, path: string) => {
  event.returnValue = fs.existsSync(path)
    ? fs.statSync(path).isFile()
      ? fs.readFileSync(path, 'utf8').length < 25_000
        ? fs.readFileSync(path, 'utf8')
        : 'File too big!'
      : 'Not a file!'
    : 'File does not exists!';
});

ipcMain.on('ds:write', (event, path: string, data: string) => {
  let status = 'Success!';
  let filePath = '';

  if (path.length === 0) {
    filePath = dialog.showSaveDialogSync(mainWindow);

    fs.writeFile(filePath, data, { encoding: 'utf8' }, (err) => {
      err && (status = err.message);
      dialog.showErrorBox('Cannot save file!', err.message);
    });
  } else {
    fs.writeFile(path, data, { encoding: 'utf8' }, (err) => {
      err && (status = err.message);
      dialog.showErrorBox('Cannot save file!', err.message);
    });
  }

  event.returnValue = { status, path: path ? path : filePath };
});

ipcMain.on('ds:rename', (event, oldPath: string, newPath: string) => {
  fs.renameSync(oldPath, newPath);
});

ipcMain.on('ds:delete', (event, path: string, isFile: boolean) => {
  if (isFile) {
    fs.rmSync(path);
  } else {
    fs.rmdirSync(path);
  }
});

ipcMain.on('ds:mkdir', (event, path: string) => {
  fs.mkdirSync(path);
});

ipcMain.on('ds:workDir', (event) => {
  let fileSelectionPromise = dialog.showOpenDialog({
    properties: ['openFile', 'openDirectory', 'multiSelections'],
  });

  fileSelectionPromise.then(function (obj) {
    event.sender.send('selectedfolders', obj.filePaths);

    obj.filePaths
      .map((filePath) => {
        return fs
          .readdirSync(filePath, { withFileTypes: true })

          .filter((dirent) => !dirent.isDirectory())

          .map((dirent) => filePath + '/' + dirent.name);
      })
      .reduce((filesacc, files) => {
        filesacc = filesacc.concat(files);

        return filesacc;
      })
      .every((absolutefilepath) => {
        let stats: fs.Stats = fs.statSync(absolutefilepath);

        event.sender.send('fileslist', path.basename(absolutefilepath), stats);

        return true;
      });
  });
});

ipcMain.on('ds:explore', (event, path: string) => {
  const explored: ExplolerItem[] = [];

  fs.readdirSync(path, {
    encoding: 'utf8',
    withFileTypes: true,
  }).map((item) => {
    explored.push({
      ...item,
      isDirectory: item.isDirectory(),
      isFile: item.isFile(),
    });
  });

  event.returnValue = explored
    .sort((a, b) => {
      let na = a.name.toLowerCase();
      let nb = b.name.toLowerCase();

      if (na < nb) {
        return 1;
      }

      if (na > nb) {
        return -1;
      }

      return 0;
    })
    .sort((a, b) => (a === b ? 0 : a ? -1 : 1));
});

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  const settings = new Settings({
    configName: 'settings',
    defaults: {
      windowBounds: { width: 800, height: 600 },
      fullscreen: false,
    },
  });

  // Create the browser window.
  mainWindow = new BrowserWindow({
    // ...settings.get('windowBounds'),
    // minHeight: 600,
    // minWidth: 800,
    // fullscreen: settings.get('fullscreen'),

    height: 1080,
    width: 1920,

    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  // set the menu to desktop app
  const menu_design = Menu.buildFromTemplate(new DSMenu().initMenu());
  Menu.setApplicationMenu(menu_design);

  mainWindow.on('resize', () => {
    const { width, height } = mainWindow.getBounds();

    settings.set('windowBounds', { width, height });
  });

  mainWindow.on('enter-full-screen', () => {
    settings.set('fullscreen', mainWindow.isFullScreen());
  });

  mainWindow.on('leave-full-screen', () => {
    settings.set('fullscreen', mainWindow.isFullScreen());
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
